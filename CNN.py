# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Nz84_F9a5SWpSk7gCIxuQ9xEb679TJzl
"""

from tensorflow.keras import layers
from tensorflow.keras import models

from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

from keras.datasets import cifar10

(trainX, trainy), (testx, testy) = cifar10.load_data()

print(trainX.shape)
print(trainy.shape)
print(testx.shape)
print(testy.shape)

!git clone https://github.com/sam360digitmg/AI-Datasets.git

from zipfile import ZipFile

file_name = '/content/AI-Datasets/CNN/Animals.zip'

with ZipFile(file_name, 'r') as zip:
  zip.extractall()
  print('Done')

import os, shutil

base_dir = '/content/cats and dogs small'

train_dir = '/content/cats and dogs small/train'
validation_dir = '/content/cats and dogs small/validation'
test_dir = '/content/cats and dogs small/test'

train_cat_dir = '/content/cats and dogs small/train/cats'
train_dogs_dir = '/content/cats and dogs small/train/dogs'
validation_cat_dir = '/content/cats and dogs small/validation/cats'
validation_dog_dir = '/content/cats and dogs small/validation/dogs'
test_cat_dir = '/content/cats and dogs small/test/cats'
test_dog_dir = '/content/cats and dogs small/test/dogs'

print('Total training cat images: ', len(os.listdir(train_cat_dir)))
print('Total training dog images: ', len(os.listdir(train_dogs_dir)))
print('Total validation cat images: ', len(os.listdir(validation_cat_dir)))
print('Total validation dog images: ', len(os.listdir(validation_dog_dir)))
print('Total test cat images: ', len(os.listdir(test_cat_dir)))
print('Total test dog images: ', len(os.listdir(test_dog_dir)))

from tensorflow.keras import layers
from tensorflow.keras import models

model = models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (150, 150, 3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128, (3,3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(128, (3,3), activation = 'relu'))
model.add(layers.MaxPooling2D((2,2)))

model.summary()

model.add(layers.Flatten())
model.add(layers.Dense(512, activation = 'relu'))
model.add(layers.Dense(1, activation = 'sigmoid'))

model.summary()

from tensorflow.keras import optimizers
model.compile(loss = 'binary_crossentropy', optimizer = optimizers.RMSprop(lr = 1e-4), metrics = ['acc'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255)
test_datagen = ImageDataGenerator(rescale = 1./255)
train_generator = train_datagen.flow_from_directory(train_dir, target_size = (150, 150), batch_size = 20, class_mode = 'binary')
validation_generator = test_datagen.flow_from_directory(validation_dir, target_size = (150, 150), batch_size = 20, class_mode = 'binary')

history = model.fit_generator(train_generator, steps_per_epoch = 100, epochs = 30, validation_data = validation_generator, validation_steps = 50)
model.save('cats_and_dogs_small_1.h5')

import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc)+1)
plt.plot(epochs, acc, 'bo', label = 'training acc')
plt.plot(epochs, val_acc, 'b', label = 'validation acc')
plt.legend()
plt.figure()

plt.plot(epochs, loss, 'bo', label = 'training loss')
plt.plot(epochs, val_loss, 'b', label = 'validation loss')
plt.legend()
plt.show()

#Data Augmentation
datagen = ImageDataGenerator(rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2, zoom_range = 0.2, horizontal_flip = True, fill_mode = 'nearest')

from tensorflow.keras.preprocessing import image
fnames = [os.path.join(train_cats_dir, fname) for fname in os.listdir(train_cats_dir)]

img_path = fnames[3]

img = image.load_img()